---
- name: Ensure all required inputs are valid or not blank
  fail:
    msg: "Error: server instance, project name, environment, or deployer credentials are invalid!"
  when: |
    jasper_server_instance == '' or jasper_server_instance not in ['JCRS', 'NRSRS'] or
    jasper_project_name == '' or jasper_project_name in jasper_invalid_project_names or
    jasper_env == '' or jasper_env not in ['dev', 'test', 'prod'] or
    jasper_ds_0_url == '' or
    jasper_ds_0_user == '' or
    jasper_ds_0_password == '' or
    jasper_deployer_url == '' or
    jasper_deployer_user == '' or
    jasper_deployer_password == '' or
    jasper_cookie_key == '' or
    jasper_route_id == ''

- name: Install xmllint on Alpine Linux
  apk:
    name: libxml2-utils
    state: present
  when: ansible_os_family == "Alpine"

- name: Copy source files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { src: ../src/jasper-server/src/main/resources/, dest: "{{ jasper_reports_dir }}/main" }
    - { src: ../src/jasper-server/src/main/common/, dest: "{{ jasper_reports_dir }}/main/resources/{{ jasper_server_instance }}/Common" }
    - { src: ../src/jasper-server/src/main/template/, dest: "{{ jasper_reports_dir }}/_template" }
    - { src: "../src/jasper-server/src/main/template/resources/{{ jasper_server_instance }}/Data_Sources", dest: "{{ jasper_reports_dir }}/main/resources/{{ jasper_server_instance }}" }

- name: Generate config files
  template:
    src: "templates/{{ jasper_server_instance }}_{{ jasper_project_name }}.xml.j2"
    dest: "{{ item }}"
  loop:
    - "{{ jasper_reports_dir }}/_template/resources/{{ jasper_server_instance }}/Data_Sources/{{ jasper_server_instance }}_{{ jasper_project_name }}.xml"
    - "{{ jasper_reports_dir }}/main/resources/{{ jasper_server_instance }}/Data_Sources/{{ jasper_server_instance }}_{{ jasper_project_name }}.xml"

- name: Create archives
  archive:
    path: "{{ item.path }}"
    dest: "{{ item.dest }}"
    format: zip
  loop:
    - { path: "{{ jasper_reports_dir }}/main/", dest: "{{ jasper_reports_dir }}/main.zip" }
    - { path: "{{ jasper_reports_dir }}/_template/", dest: "{{ jasper_reports_dir}}/template.zip" }

- name: "Delete the application's reports and datasource on the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  uri:
    url: "{{ jasper_deployer_url }}/rest/resource/{{ item.path }}"
    force_basic_auth: yes
    user: "{{ jasper_deployer_user }}"
    password: "{{ jasper_deployer_password }}"
    method: DELETE
    headers:
      Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
    return_content: true
    validate_certs: false
  loop:
    - { path: "{{ jasper_server_instance }}/{{ jasper_project_name }}" }
    - { path: "{{ jasper_server_instance }}/Data_Sources/{{ jasper_server_instance }}_{{ jasper_project_name }}" }
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']
  ignore_errors: true

- name: "Import the template and main packages on the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  uri:
    url: "{{ jasper_deployer_url }}/rest_v2/import"
    force_basic_auth: yes
    user: "{{ jasper_deployer_user }}"
    password: "{{ jasper_deployer_password }}"
    method: POST
    headers:
      Content-Type: application/zip
      Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
    src: "{{ jasper_reports_dir }}/{{ item.file }}"
    return_content: true
    validate_certs: false
  register: import_responses
  loop:
    - { file: "template.zip" }
    - { file: "main.zip" }
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']

- name: "Get the content for the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  set_fact:
    import_content: "{{ import_content | default([]) + [{ 'file': item.item, 'content': item.content }] }}"
  loop: "{{ import_responses.results }}"
  loop_control:
    label: "file: {{ item.item }}, content: {{ item.content | default('') }}"
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']

- name: "Extract the state id for the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  shell: |
    echo "{{ item.content }}" \
    | sed 's/<?xml version=1.0 encoding=UTF-8 standalone=yes?>/<?xml version="1.0" encoding="UTF-8" standalone="yes"?>/' \
    | xmllint --xpath '/state/id/text()' -
  register: import_route
  loop: "{{ import_content }}"
  loop_control:
    label: "file: {{ item.file }}"
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']

- name: pause
  pause:
    seconds: 5

- name: "Check the import status for the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  uri:
    url: "{{ jasper_deployer_url }}/rest_v2/import/{{ item.stdout }}/state"
    force_basic_auth: yes
    user: "{{ jasper_deployer_user }}"
    password: "{{ jasper_deployer_password }}"
    method: GET
    headers:
      Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
    return_content: true
    validate_certs: false
  register: import_status
  loop: "{{ import_route.results }}"
  loop_control:
    label: "file: {{ item.item.file }}, state_id: {{ item.stdout | default('') }}"
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']

- name: "Extract the message for the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  shell: |
    echo "{{ item.content }}" \
    | sed 's/<?xml version=1.0 encoding=UTF-8 standalone=yes?>/<?xml version="1.0" encoding="UTF-8" standalone="yes"?>/' \
    | xmllint --xpath '/state/message/text()' -
  register: message
  loop: "{{ import_status.results }}"
  loop_control:
    label: "file: {{ item.item.item.file }}, state_id: {{ item.item.stdout | default('') }}"
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']

- name: "Check import status for the {{ jasper_server_instance }} server instance (route_id: {{ jasper_route_id }})"
  debug:
    msg: "file: {{ item.item.item.item.file }}, state_id: {{ item.item.item.stdout }}, message: {{ item.stdout }}"
  loop: "{{ message.results }}"
  loop_control:
    label: "file: {{ item.item.item.item.file }}, state_id: {{ item.item.item.stdout | default('') }}, message: {{ item.stdout | default('')}}"
  when: jasper_env == 'dev' and jasper_route_id == '.1' or jasper_env in ['test', 'prod']
  failed_when: item.stdout != "Import succeeded."

- name: Remove files
  file:
    path: "{{ playbook_dir }}/{{ item }}"
    state: absent
  loop:
    - jcrs-reports/
